---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM User for administration use with MFA enforced'
Metadata:
  Template:
    Project: !Ref Project
    Revision: !Ref Revision

Parameters:
  Project:
    Description: An identifier for the project this stack is associated with.
    Type: String
  Revision:
    Description: The git short hash of the repo when the template was applied.
    Type: String

Resources:
  AdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: Administrator
      LoginProfile:
        Password: !GetAtt RandomString.Value
        PasswordResetRequired: true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        - PolicyName: enforce-mfa
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowViewAccountInfo
                Effect: Allow
                Action: iam:ListVirtualMFADevices
                Resource: '*'
              - Sid: AllowManageOwnVirtualMFADevice
                Effect: Allow
                Action:
                  - iam:CreateVirtualMFADevice
                  - iam:DeleteVirtualMFADevice
                Resource: arn:aws:iam::*:mfa/Administrator
              - Sid: AllowManageOwnUserMFA
                Effect: Allow
                Action:
                  - iam:DeactivateMFADevice
                  - iam:EnableMFADevice
                  - iam:GetUser
                  - iam:ListMFADevices
                  - iam:ResyncMFADevice
                Resource: arn:aws:iam::*:user/Administrator
              - Sid: DenyAllExceptListedIfNoMFA
                Effect: Deny
                NotAction:
                  - iam:CreateVirtualMFADevice
                  - iam:EnableMFADevice
                  - iam:GetUser
                  - iam:ListMFADevices
                  - iam:ListVirtualMFADevices
                  - iam:ResyncMFADevice
                  - iam:Change
                  - sts:GetSessionToken
                Resource: '*'
                Condition:
                  BoolIfExists:
                    'aws:MultiFactorAuthPresent': false
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Revision
          Value: !Ref Revision

  RandomString:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 24
      ServiceToken: !GetAtt CryptoRandomFunction.Arn

  CryptoRandomFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: [ arm64 ]
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt CryptoRandomFunctionRole.Arn
      MemorySize: 128
      Timeout: 5
      Code:
        ZipFile: >
          const response = require('cfn-response');
          exports.handler = (event, context) => response.send(event, context, response.SUCCESS, {
            Value: require('crypto').randomBytes(
              Math.ceil(parseInt(event.ResourceProperties.Length / 4) * 3)
            ).toString('base64')
          }, undefined, true);
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Revision
          Value: !Ref Revision

  CryptoRandomFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action:
              sts:AssumeRole
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole ]
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Revision
          Value: !Ref Revision

Outputs:
  TemporaryPassword:
    Value: !GetAtt RandomString.Value
    Description: Temporary password for Administrator user
